generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  Course        Course[]
  LessonOnUser  LessonOnUser[]
  CourseOnUser  CourseOnUser[]
  Video         Video[]

  @@map("users")
}

model Course {
  id           String   @id @default(cuid())
  name         String
  presentation String // markdown
  image        String
  price        Int // in cents
  createdAt    DateTime @default(now())
  creatorId    String

  creator User           @relation(fields: [creatorId], references: [id])
  lessons Lesson[]
  users   CourseOnUser[]
}

model Lesson {
  id      String      @id @default(cuid())
  name    String
  rank    String // A string that represents the order of the lesson
  content String // markdown
  state   LessonState @default(HIDDEN)

  createdAt DateTime       @default(now())
  course    Course         @relation(fields: [courseId], references: [id])
  courseId  String
  users     LessonOnUser[]
}

enum LessonState {
  HIDDEN
  PUBLISHED
  PUBLIC
}

model LessonOnUser {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  progress  Progress @default(NOT_STARTED)
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model CourseOnUser {
  id         String    @id @default(cuid())
  userId     String
  courseId   String
  createdAt  DateTime  @default(now())
  canceledAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Video {
  id      String @id @default(cuid())
  userId  String
  assetId String
  title   String

  user User @relation(fields: [userId], references: [id])
}
